/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.google.gson.Gson;
import eu.fasten.analyzer.vulnerabilitystatementsprocessor.VulnerabilityStatementsProcessor;
import eu.fasten.analyzer.vulnerabilitystatementsprocessor.db.MetadataUtility;
import eu.fasten.core.dbconnectors.PostgresConnector;
import eu.fasten.core.plugins.DBConnector;
import eu.fasten.core.plugins.KafkaPlugin;
import org.jooq.DSLContext;
import org.json.JSONArray;
import org.json.JSONTokener;
import org.pf4j.Extension;
import org.pf4j.Plugin;
import org.pf4j.PluginWrapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.sql.SQLException;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public class VulnerabilityPackagesListener extends Plugin {

    public VulnerabilityPackagesListener(PluginWrapper wrapper) {
        super(wrapper);
    }

    @Extension
    public static class VulnerabilityPackagesKafkaPlugin implements KafkaPlugin, DBConnector {

        private static Map<String, DSLContext> contexts;
        private Exception pluginError = null;
        private final Gson gson = new Gson();
        private final static Logger logger = LoggerFactory.getLogger(VulnerabilityPackagesKafkaPlugin.class.getName());

        @Override
        public void setDBConnection(Map<String, DSLContext> dslContexts) {
            contexts = dslContexts;
        }

        @Override
        public String name() {
            return "Vulnerability Packages Listener";
        }

        @Override
        public String description() {
            return "Listens to package updates from the (graph) database and triggers re-processing of vulnerabilties";
        }

        @Override
        public String version() {
            return "0.0.1";
        }

        @Override
        public void start() {
            var kafkaPlugin = new VulnerabilityStatementsProcessor.VulnerabilityStatementsKafkaPlugin();
            kafkaPlugin.setDBConnection(this.contexts);
        }

        @Override
        public void stop() {

        }

        @Override
        public Exception getPluginError() {
            return pluginError;
        }

        @Override
        public void freeResource() {

        }

        @Override
        public Optional<List<String>> consumeTopic() {
            String consumerTopic = "fasten.CallableIndexFastenPlugin.out";
            return Optional.of(Collections.singletonList(consumerTopic));
        }

        @Override
        public void setTopic(String topicName) {

        }

        @Override
        public void consume(String record) {
            var metadataUtility = new MetadataUtility();

        }

        @Override
        public Optional<String> produce() {

            return Optional.empty();
        }

        @Override
        public String getOutputPath() {
            return null;
        }
    }
}
