package eu.fasten.analyzer.restapiplugin.mvn.api.impl;

import eu.fasten.analyzer.restapiplugin.mvn.KnowledgeBaseConnector;
import eu.fasten.analyzer.restapiplugin.mvn.LazyIngestionProvider;
import eu.fasten.analyzer.restapiplugin.mvn.api.VulnerabilityApiService;
import eu.fasten.core.data.Constants;
import org.json.JSONArray;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class VulnerabilityApiServiceImpl implements VulnerabilityApiService {

    private final Logger logger = LoggerFactory.getLogger(getClass());

    @Override
    public ResponseEntity<String> getAllVulnerabilities(int offset, int limit, List<String> attributes) {
        return null;
    }

    @Override
    public ResponseEntity<String> getVulnerability(String externalId, List<String> attributes) {
        var result = KnowledgeBaseConnector.kbDao.getVulnerability(externalId);
        if (result == null) {
            return new ResponseEntity<>("Vulnerability not found", HttpStatus.NOT_FOUND);
        }
        result = result.replace("\\/", "/");
        // TODO: filtering vulnerability statement according to given attributes
        return new ResponseEntity<>(result, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<String> getCoordinatesVulnerabilities(List<String> mavenCoordinates, List<String> attributes) {
        logger.info("Received a list of Maven coordinates");
        var jsonArray = new JSONArray();
        return null;
    }

    @Override
    public ResponseEntity<String> getVulnerabilities(String package_name, String package_version, int offset, int limit, List<String> attributes) {
        if (!KnowledgeBaseConnector.kbDao.assertPackageExistence(package_name, package_version)) {
            try {
                LazyIngestionProvider.ingestArtifactWithDependencies(package_name, package_version);
            } catch (IllegalArgumentException e) {
                return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
            }
            return new ResponseEntity<>("Package version not found, but should be processed soon. Try again later", HttpStatus.CREATED);
        }
        return null;
    }

    @Override
    public ResponseEntity<String> getPurls(String externalId, int offset, int limit, List<String> attributes) {
        return null;
    }

    @Override
    public ResponseEntity<String> getVulnerableCallables(String externalId, int offset, int limit) {
        return null;
    }

    @Override
    public ResponseEntity<String> getPackageVersionVulnerabilities(String package_name, String package_version, int offset, int limit, List<String> attributes) {
        return null;
    }

    @Override
    public ResponseEntity<String> getCallableVulnerability(String package_name, String package_version, String fasten_uri) {
        return null;
    }
}
