/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.analyzer.vulnerabilitystatementsprocessor;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import eu.fasten.analyzer.vulnerabilitystatementsprocessor.db.MetadataUtility;
import eu.fasten.core.data.vulnerability.Purl;
import eu.fasten.core.data.vulnerability.Patch;
import eu.fasten.core.data.vulnerability.Vulnerability;
import eu.fasten.core.plugins.DBConnector;
import eu.fasten.core.plugins.KafkaPlugin;
import org.jooq.DSLContext;
import org.pf4j.Extension;
import org.pf4j.Plugin;
import org.pf4j.PluginWrapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

public class VulnerabilityStatementsProcessor extends Plugin {

    public VulnerabilityStatementsProcessor(PluginWrapper wrapper) {
        super(wrapper);
    }

    @Extension
    public static class VulnerabilityStatementsKafkaPlugin implements KafkaPlugin, DBConnector {
        private String consumerTopic = "fasten.Vulnerabilities.out";
        private final String baseOutputPath = File.separator + "vulnerabilities" + File.separator + "processed_statements";
        private String outputPath;
        private static Map<String, DSLContext> contexts;
        private Exception pluginError = null;
        private String lastProcessedVulnerability = null;
        private final ObjectMapper objectMapper = new ObjectMapper();
        private static final DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        private final static String[] extensions = new String[]{".java", ".py", ".pyw", ".c", ".cpp", ".h"};
        private final static Logger logger = LoggerFactory.getLogger(VulnerabilityStatementsProcessor.class.getName());

        @Override
        public void setDBConnection(Map<String, DSLContext> dslContexts) {
            contexts = dslContexts;
        }

        @Override
        public Optional<List<String>> consumeTopic() {
            return Optional.of(Collections.singletonList(consumerTopic));
        }

        @Override
        public void setTopic(String topicName) {
            this.consumerTopic = topicName;
        }

        @Override
        public void consume(String record) {
            this.pluginError = null;
            try {
                var vulnerability = objectMapper.readValue(record, Vulnerability.class);
                logger.info("Read vulnerability " + vulnerability.getId() + " from " + consumerTopic);
                var metadataUtility = new MetadataUtility();
                lastProcessedVulnerability = injectVulnerabilityIntoDB(vulnerability, metadataUtility);
                outputPath = baseOutputPath + File.separator + vulnerability.getId() + ".json";
            } catch (JsonProcessingException e) {
                logger.error("Could not parse record JSON");
                setPluginError(e);
            }
        }

        @Override
        public Optional<String> produce() {
            if (lastProcessedVulnerability == null) {
                return Optional.empty();
            } else {
                return Optional.of(lastProcessedVulnerability);
            }
        }

        @Override
        public String getOutputPath() {
            return outputPath;
        }

        @Override
        public String name() {
            return "Vulnerability Statements Processor";
        }

        @Override
        public String description() {
            return "Reads vulnerabilities from " + consumerTopic +
                    " and injects them in the database.";
        }

        @Override
        public String version() {
            return "0.0.1";
        }

        @Override
        public void start() {
        }

        @Override
        public void stop() {
        }

        @Override
        public Exception getPluginError() {
            return pluginError;
        }

        public void setPluginError(Exception throwable) {
            this.pluginError = throwable;
        }

        @Override
        public void freeResource() {
        }

        @Override
        public long getMaxConsumeTimeout() {
            return 3600000;
        }

        /**
         * Method to inject the information contained in a Vulnerability Object.
         *
         * @param v               - Vulnerability Object
         * @param metadataUtility - Metadata DAO
         */
        public String injectVulnerabilityIntoDB(Vulnerability v, MetadataUtility metadataUtility) throws JsonProcessingException {
            logger.info("Injecting vulnerability " + v.getId() + " into the Database");
            var ecosystem = v.getPurls().size() > 0 ? getVulnerabilityEcosystem(v) : null;
            var context = ecosystem == null ? null : contexts.get(ecosystem);
            if (context == null) return objectMapper.writeValueAsString(v);
            v.setFirstPatchedPurls(new LinkedHashSet<>(v.getFirstPatchedPurls().stream()
                    .filter(Objects::nonNull).collect(Collectors.toList())));

            var pkgIds = metadataUtility.getPackageIds(context, v);
            if (pkgIds.size() == 0) return objectMapper.writeValueAsString(v);

            var pkgVersionVulnIds = metadataUtility.getPackageVersionIds(v.getPurls(), context, pkgIds, v);
            if (pkgVersionVulnIds.size() == 0) return objectMapper.writeValueAsString(v);

            // FIXME: Does this assume the list of pkg version is ordered by date?
            var lastVulnVersionId     = pkgVersionVulnIds.get(pkgVersionVulnIds.size() - 1);
            var fastenUris = new HashSet<String>();

            checkFileExtensions(v);

            // Look in original file
            v.getPatches().forEach(p -> {
                logger.info("Searching for callables in " + p.getFileName() + " for Package Version ID: " + lastVulnVersionId);
                fastenUris.addAll(metadataUtility.getFastenUrisForPatch(p.getFileName(),
                        p.getOriginalChangedLineNumbers(),
                        lastVulnVersionId, context));
            });

            var pkgVersionPatchedIds = metadataUtility.getPackageVersionIds(v.getFirstPatchedPurls(), context, pkgIds, null);
            if (pkgVersionPatchedIds.size() > 0) {
                var firstPatchedVersionId = pkgVersionPatchedIds.get(pkgVersionPatchedIds.size() - 1);

                // Look in new file
                v.getPatches().forEach(p -> {
                    logger.info("Searching for callables in " + p.getFileName() + " for Package Version ID: " + firstPatchedVersionId);
                    var calls = metadataUtility.getFastenUrisForPatch(p.getFileName(),
                            p.getNewChangedLineNumbers(),
                            firstPatchedVersionId, context);
                    fastenUris.addAll(calls);
                    if (calls.size() > 0) v.addPatchLink(p.getPatchUrl());
                });
            }

            logger.info("Collected " + fastenUris.size() + " vulnerable fasten_uris ids");

            if (fastenUris.size() == 0) {
                pkgVersionVulnIds.forEach(pkgVsnId -> {
                    if (metadataUtility.areCallablesMissing(pkgVsnId, context)) {
                        var vsn = metadataUtility.getCache().pkgVsnIdToVsn.get(pkgVsnId);
                        var pkgName = metadataUtility.getCache().pkgVsnToName.get(vsn);
                        var pkgCoord = ecosystem + "/packages/" + pkgName + "/" + vsn;
                        metadataUtility.sendIngestRequest(pkgCoord);
                    }
                });
            }

            var fullFastenUris = new HashSet<String>();
            var vulnCallableIds = new HashSet<Long>();
            var vulnPkgVersionIds = new HashSet<>(pkgVersionVulnIds);
            fastenUris.forEach(uri -> {
                var callIds = metadataUtility.getCallableIdsForFastenUri(uri, vulnPkgVersionIds, context);
                callIds.forEach(id -> fullFastenUris.add(metadataUtility.getFullFastenUri(uri, id)));
                vulnCallableIds.addAll(callIds);
            });


            // TODO: instead of setting FASTEN URIs in the metadata, we will update a table. For now we throw an exception!
//            v.setFastenUris(fullFastenUris);

            writePatchDate(v);

            logger.info("Injecting all the information in the DB");
            vulnPkgVersionIds.forEach(id -> metadataUtility.injectPackageVersionVulnerability(v, id, context));
            vulnCallableIds.forEach(id -> metadataUtility.injectCallableVulnerability(v, id, context));
            return objectMapper.writeValueAsString(v);
        }

        /**
         * Checks the extension of each file reported as Patch.
         * Supported extensions: {.java, .py, .c, .cpp}
         * @param v - Vulnerability Object
         */
        public static void checkFileExtensions(Vulnerability v) {
            var supportedPatches = new HashSet<Patch>();
            v.getPatches().forEach(p -> {
                if (Arrays.stream(extensions).anyMatch(p.getFileName()::endsWith)) {
                    supportedPatches.add(p);
                }
            });
            v.setPatches(supportedPatches);
        }

        /**
         * Finds the correct DSLContext for the vulnerability given.
         *
         * @param v - Vulnerability Object
         * @return DSLContext
         */
        public String getVulnerabilityEcosystem(Vulnerability v) {
            assert v.getPurls().size() > 0;
            var purl = v.getPurls().iterator().next();
            try {
                return purl.getType();
            } catch (Exception e) {
                logger.error("PURL was not formatted correctly");
                return null;
            }
        }

        /**
         * Looks for the latest Patch Date and sets it
         *
         * @param v - Vulnerability Object
         */
        public static void writePatchDate(Vulnerability v) {
            if (v.getPatches().size() == 0) return;
            try {
                boolean set = false;
                var latestDate = sdf.parse("1950-01-01");
                for (Patch patch : v.getPatches()) {
                    var patchDate = sdf.parse(patch.getPatchDate());
                    if (patchDate.after(latestDate)) {
                        latestDate = patchDate;
                        set = true;
                    }
                }
                if (set)
                    v.setPatchDate(sdf.format(latestDate));
            } catch (Exception e) {
                logger.error("Error parsing patch date!");
            }
        }
    }
}
