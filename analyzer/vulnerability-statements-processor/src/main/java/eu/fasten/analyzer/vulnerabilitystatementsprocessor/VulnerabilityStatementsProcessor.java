/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.analyzer.vulnerabilitystatementsprocessor;

import com.google.gson.Gson;
import eu.fasten.analyzer.vulnerabilitystatementsprocessor.db.MetadataUtility;
import eu.fasten.core.data.Constants;
import eu.fasten.core.data.vulnerability.Patch;
import eu.fasten.core.data.vulnerability.Purl;
import eu.fasten.core.data.vulnerability.Vulnerability;
import eu.fasten.core.plugins.DBConnector;
import eu.fasten.core.plugins.KafkaPlugin;
import org.jooq.DSLContext;
import org.pf4j.Extension;
import org.pf4j.Plugin;
import org.pf4j.PluginWrapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

public class VulnerabilityStatementsProcessor extends Plugin {

    public VulnerabilityStatementsProcessor(PluginWrapper wrapper) {
        super(wrapper);
    }

    @Extension
    public static class VulnerabilityStatementsKafkaPlugin implements KafkaPlugin, DBConnector {
        private String consumerTopic = "fasten.Vulnerabilities.out";
        private final String baseOutputPath = File.separator + "vulnerabilities" + File.separator + "processed_statements";
        private String outputPath;
        private static Map<String, DSLContext> contexts;
        private Exception pluginError = null;
        private String lastProcessedVulnerability = null;
        private final Gson gson = new Gson();
        private static final DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        private final static String[] extensions = new String[]{".java", ".py", ".pyw", ".c", ".cpp", ".h"};
        private final static Logger logger = LoggerFactory.getLogger(VulnerabilityStatementsProcessor.class.getName());

        @Override
        public void setDBConnection(Map<String, DSLContext> dslContexts) {
            contexts = dslContexts;
        }

        @Override
        public Optional<List<String>> consumeTopic() {
            return Optional.of(Collections.singletonList(consumerTopic));
        }

        @Override
        public void setTopic(String topicName) {
            this.consumerTopic = topicName;
        }

        @Override
        public void consume(String record) {
            this.pluginError = null;
            try {
                var vulnerability = gson.fromJson(record, Vulnerability.class);
                logger.info("Read vulnerability " + vulnerability.getId() + " from " + consumerTopic);
                var metadataUtility = new MetadataUtility();
                lastProcessedVulnerability = injectVulnerabilityIntoDB(vulnerability, metadataUtility);
                outputPath = baseOutputPath + File.separator + vulnerability.getId() + ".json";
            } catch (Exception e) {
                logger.error("Error processing vulnerability statement: " + e);
                setPluginError(e);
            }
        }

        @Override
        public Optional<String> produce() {
            if (lastProcessedVulnerability == null) {
                return Optional.empty();
            } else {
                return Optional.of(lastProcessedVulnerability);
            }
        }

        @Override
        public String getOutputPath() {
            return outputPath;
        }

        @Override
        public String name() {
            return "Vulnerability Statements Processor";
        }

        @Override
        public String description() {
            return "Reads vulnerabilities from " + consumerTopic +
                    " and injects them in the database.";
        }

        @Override
        public String version() {
            return "0.0.1";
        }

        @Override
        public void start() {
        }

        @Override
        public void stop() {
        }

        @Override
        public Exception getPluginError() {
            return pluginError;
        }

        public void setPluginError(Exception throwable) {
            this.pluginError = throwable;
        }

        @Override
        public void freeResource() {
        }

        @Override
        public long getMaxConsumeTimeout() {
            return 3600000;
        }

        /**
         * Method to inject the information contained in a Vulnerability Object.
         *
         * @param v               - Vulnerability Object
         * @param metadataUtility - Metadata DAO
         */
        public String injectVulnerabilityIntoDB(Vulnerability v, MetadataUtility metadataUtility)  {
            logger.info("Injecting vulnerability " + v.getId() + " into the Database");
            var valdidatedPurls = validateAndSortPurls(v.getPurls());
            filterUnsupportedPatches(v);
            updatePatchDate(v);

            var ecosystem = valdidatedPurls.size() > 0 ? getVulnerabilityEcosystem(v) : null;
            var context = ecosystem == null ? null : contexts.get(ecosystem);
            if (context == null) return gson.toJson(v);

            var pkgIds = metadataUtility.getPackageIds(context, valdidatedPurls);
            if (pkgIds.size() == 0) return gson.toJson(v);

            var vulnerablePackageVersionIds = metadataUtility.getPackageVersionIds(valdidatedPurls, context, pkgIds, v);
            if (vulnerablePackageVersionIds.size() == 0) return gson.toJson(v);

            var vulnerableFastenUris = new HashSet<String>();
            vulnerableFastenUris.addAll(findFastenUrisInLastVulnerableVersion(v, vulnerablePackageVersionIds, metadataUtility, context));
            vulnerableFastenUris.addAll(findFastenUrisInFirstPatchedVersion(v, pkgIds, metadataUtility, context));
            var vulnerableCallables = findVulnerableCallables(vulnerableFastenUris, vulnerablePackageVersionIds, metadataUtility, context);
            v.setFastenUris(new HashSet<>(vulnerableCallables.values()));
            logger.info("Collected " + vulnerableFastenUris.size() + " vulnerable fasten_uris.");

            logger.info("Injecting all the information in the DB");
            injectVulnerableCallables(vulnerableCallables.keySet(), v, metadataUtility, context);
            injectVulnerablePackageVersions(new HashSet<>(vulnerablePackageVersionIds), v, metadataUtility, context);
            return gson.toJson(v);
        }

        HashSet<String> findFastenUrisInLastVulnerableVersion(Vulnerability v, List<Long> pkgVersionVulnIds, MetadataUtility metadataUtility, DSLContext context) {
            var lastVulnVersionId = pkgVersionVulnIds.get(pkgVersionVulnIds.size() - 1);
            var fastenUris = new HashSet<String>();
            v.getPatches().forEach(p -> {
                logger.info("Searching for callables in " + p.getFileName() + " for Package Version ID: " + lastVulnVersionId);
                fastenUris.addAll(metadataUtility.getFastenUrisForPatch(p.getFileName(),
                        p.getOriginalChangedLineNumbers(),
                        lastVulnVersionId, context));
            });
            return fastenUris;
        }

        HashSet<String> findFastenUrisInFirstPatchedVersion(Vulnerability v, HashMap<String, Long> pkgIds, MetadataUtility metadataUtility, DSLContext context) {
            var firstPatchedVersionId = findFirstPatchedVersionId(v, pkgIds, metadataUtility, context);
            var fastenUris = new HashSet<String>();
            v.getPatches().forEach(p -> {
                logger.info("Searching for callables in " + p.getFileName() + " for Package Version ID: " + firstPatchedVersionId);
                fastenUris.addAll(metadataUtility.getFastenUrisForPatch(p.getFileName(),
                        p.getNewChangedLineNumbers(),
                        firstPatchedVersionId, context));
            });
            return fastenUris;
        }

        Long findFirstPatchedVersionId(Vulnerability v, HashMap<String, Long> pkgIds, MetadataUtility metadataUtility, DSLContext context) {
            var validatedFirstPatchedPurls = validateAndSortPurls(v.getFirstPatchedPurls());
            var pkgVersionPatchedIds = metadataUtility.getPackageVersionIds(validatedFirstPatchedPurls, context, pkgIds, null);
            if (pkgVersionPatchedIds.size() > 0) {
                return pkgVersionPatchedIds.get(pkgVersionPatchedIds.size() - 1);
            } else {
                return -1L;
            }
        }

        HashMap<Long, String> findVulnerableCallables(HashSet<String> vulnerableFastenUris, List<Long> vulnPkgVersionIds, MetadataUtility metadataUtility, DSLContext context) {
            var vulnerableCallables = new HashMap<Long, String>();
            vulnerableFastenUris.forEach(uri -> {
                var callIds = metadataUtility.getCallableIdsForFastenUri(uri, new HashSet<>(vulnPkgVersionIds), context);
                callIds.forEach(id -> vulnerableCallables.put(id, metadataUtility.getFullFastenUri(uri, id)));
            });
            return vulnerableCallables;
        }

        void injectVulnerableCallables(Set<Long> callableIds, Vulnerability v, MetadataUtility metadataUtility, DSLContext context) {
            callableIds.forEach(id -> metadataUtility.injectCallableVulnerability(v, id, context));
        }

        void injectVulnerablePackageVersions(Set<Long> packageVersionIds, Vulnerability v, MetadataUtility metadataUtility, DSLContext context) {
            packageVersionIds.forEach(id -> metadataUtility.injectPackageVersionVulnerability(v, id, context));
        }

        /**
         * Checks the extension of each file reported as Patch.
         * Supported extensions: {.java, .py, .c, .cpp}
         * @param v - Vulnerability Object
         */
        public static void filterUnsupportedPatches(Vulnerability v) {
            var supportedPatches = new HashSet<Patch>();
            v.getPatches().forEach(p -> {
                if (Arrays.stream(extensions).anyMatch(p.getFileName()::endsWith)) {
                    supportedPatches.add(p);
                }
            });
            v.setPatches(supportedPatches);
        }

        /**
         * Finds the correct DSLContext for the vulnerability given.
         *
         * @param v - Vulnerability Object
         * @return DSLContext
         */
        public String getVulnerabilityEcosystem(Vulnerability v) {
            assert v.getPurls().size() > 0;
            var purl = v.getPurls().iterator().next();
            var type = new Purl(purl).getType();
            switch (type) {
                case "deb":
                    return Constants.debianForge;
                case "maven":
                    return Constants.mvnForge;
                case "pypi":
                    return Constants.pypiForge;
                default:
                    throw new IllegalArgumentException("Unsupported ecosystem: " + type);
            }
        }

        /**
         * Looks for the latest Patch Date and sets it
         *
         * @param v - Vulnerability Object
         */
        public static void updatePatchDate(Vulnerability v) {
            if (v.getPatches().size() == 0) return;
            try {
                boolean set = false;
                var latestDate = sdf.parse("1950-01-01");
                for (Patch patch : v.getPatches()) {
                    var patchDate = sdf.parse(patch.getPatchDate());
                    if (Objects.nonNull(patchDate) && patchDate.after(latestDate)) {
                        latestDate = patchDate;
                        set = true;
                    }
                }
                if (set)
                    v.setPatchDate(sdf.format(latestDate));
            } catch (Exception e) {
                logger.error("Error parsing patch date: " + e);
            }
        }

        public static LinkedHashSet<Purl> validateAndSortPurls(LinkedHashSet<String> purls) {
            var validatedPurls = new LinkedHashSet<Purl>();
            purls.forEach(p -> {
                var parsedPurl = Purl.of(p);
                if(parsedPurl != null) {
                    validatedPurls.add(parsedPurl);
                }
                else {
                    logger.warn("Purl " + p + " could not be validated, skipping.");
                }
            });
            return validatedPurls.stream().sorted(Comparator.comparing(Purl::getVersion)).
                    collect(Collectors.toCollection(LinkedHashSet::new));
        }
    }
}
