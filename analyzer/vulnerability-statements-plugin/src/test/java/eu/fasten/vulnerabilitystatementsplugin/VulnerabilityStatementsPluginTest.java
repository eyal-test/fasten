/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilitystatementsplugin;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import eu.fasten.analyzer.vulnerabilitystatementsplugin.VulnerabilityStatementsPlugin;
import eu.fasten.analyzer.vulnerabilitystatementsplugin.db.MetadataUtility;
import eu.fasten.analyzer.vulnerabilitystatementsplugin.utils.Cache;
import eu.fasten.analyzer.vulnerabilitystatementsplugin.utils.Patch;
import eu.fasten.analyzer.vulnerabilitystatementsplugin.utils.Severity;
import eu.fasten.analyzer.vulnerabilitystatementsplugin.utils.Vulnerability;
import eu.fasten.core.data.Constants;
import org.jooq.DSLContext;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;

public class VulnerabilityStatementsPluginTest {
    private VulnerabilityStatementsPlugin.VulnerabilityStatementsKafkaPlugin kafkaPlugin;
    private ObjectMapper objectmapper = new ObjectMapper();
    private DSLContext context;

    @BeforeEach
    public void setUp() {
        context = Mockito.mock(DSLContext.class);
        kafkaPlugin = new VulnerabilityStatementsPlugin.VulnerabilityStatementsKafkaPlugin();
        kafkaPlugin.setTopic("fasten.vulnerability-consumer.out");
        kafkaPlugin.setDBConnection(new HashMap<>(Map.of(Constants.mvnForge, context)));
    }

    @Test
    public void injectIntoDBVulnerabilityStatement() throws JsonProcessingException {
        var v = new Vulnerability();
        v.setId("CVE-TEST");
        v.setDescription("Mock Vulnerability");
        v.setSeverity(Severity.HIGH);
        v.setScoreCVSS2(7.5);
        v.setScoreCVSS3(5.0);
        v.setPublishedDate("12/11/2019");
        v.setLastModifiedDate("08/31/2020");
        v.setPurls(Arrays.asList("pkg:maven/org.testing/mock@1.0.1"));
        var patch = new Patch();
        patch.setPatchDate("04/04/2004");
        patch.setNewChangedLineNumbers(Arrays.asList(33));
        patch.setOriginalChangedLineNumbers(Arrays.asList(33));
        patch.setFileName("/src/main/java/net/GenericClass.java");
        v.setPatches(new HashSet<>(Arrays.asList(patch)));

        var metadataUtility = Mockito.mock(MetadataUtility.class);

        // MOCKITO WHEN
        var pkgIds = new HashMap<String, Long>(); pkgIds.put("pkg:maven/org.testing/mock", 1L);
        when(metadataUtility.getPackageIds(Mockito.any(DSLContext.class), Mockito.any(Vulnerability.class))).thenReturn(pkgIds);
        when(metadataUtility.getPackageVersionIds(v.getPurls(), context, pkgIds, v)).thenReturn(Arrays.asList(1L));
        when(metadataUtility.getPackageVersionIds(v.getFirstPatchedPurls(), context, pkgIds, null)).thenReturn(new ArrayList<>());

        var fasten_uri = "/java/net/GenericClass.%3Cclinit%3E()%2Fjava.lang%2FVoidType";
        var fastenUris = new HashSet<>(Arrays.asList(fasten_uri));
        var pkgVersionIds = new HashSet<>(Arrays.asList(1L));
        when(metadataUtility.getFastenUrisForPatch(patch.getFileName(),
                patch.getNewChangedLineNumbers(),
                1L, context)).thenReturn(fastenUris);
        doNothing().when(metadataUtility).injectPackageVersionVulnerability(Mockito.any(Vulnerability.class), Mockito.anyLong(), Mockito.any(DSLContext.class));
        when(metadataUtility.getCallableIdsForFastenUri(fasten_uri, pkgVersionIds, context)).thenReturn(new HashSet<>(Arrays.asList(42L)));
        when(metadataUtility.injectCallableVulnerability(Mockito.any(Vulnerability.class), Mockito.anyLong(), Mockito.any(DSLContext.class))).thenReturn(1);
        when(metadataUtility.getFullFastenUri(fasten_uri, 42L)).thenReturn("full_fasten_uri");

        // CALL
        kafkaPlugin.injectVulnerabilityIntoDB(v, metadataUtility);

        // MOCKITO VERIFY
        Mockito.verify(metadataUtility).getPackageIds(context, v);
        Mockito.verify(metadataUtility).getPackageVersionIds(v.getPurls(), context, pkgIds, v);
        Mockito.verify(metadataUtility).getPackageVersionIds(v.getFirstPatchedPurls(), context, pkgIds, null);
        Mockito.verify(metadataUtility).getFastenUrisForPatch(patch.getFileName(),
                patch.getNewChangedLineNumbers(),
                1L, context);
        Mockito.verify(metadataUtility).getCallableIdsForFastenUri(fasten_uri, pkgVersionIds, context);
        // VERIFY injection
        Mockito.verify(metadataUtility).injectPackageVersionVulnerability(v, 1L, context);
        Mockito.verify(metadataUtility).injectCallableVulnerability(v, 42L, context);
        Mockito.verify(metadataUtility).getFullFastenUri(fasten_uri, 42L);
    }

    @Test
    public void writePatchDateTest() {
        var v = new Vulnerability();
        var patch = new Patch();
        patch.setPatchDate("2015-05-15");
        patch.setNewChangedLineNumbers(Arrays.asList(42));
        patch.setFileName("/src/main/java/net/GenericClass.java");

        var patch2 = new Patch();
        patch2.setPatchDate("2004-09-28");
        patch2.setNewChangedLineNumbers(Arrays.asList(55));
        patch2.setFileName("/src/main/java/net/NiceClass.java");

        v.setPatches(new HashSet<>(Arrays.asList(patch, patch2)));

        VulnerabilityStatementsPlugin.VulnerabilityStatementsKafkaPlugin.writePatchDate(v);

        assertEquals(v.getPatchDate(), "2015-05-15");
    }

    @Test
    public void cleanFileExtensions() {
        var v = new Vulnerability();
        var patch = new Patch();
        patch.setPatchDate("2015-05-15");
        patch.setNewChangedLineNumbers(Arrays.asList(42));
        patch.setFileName("/src/main/java/net/GenericClass.java");

        var patch2 = new Patch();
        patch2.setPatchDate("2004-09-28");
        patch2.setNewChangedLineNumbers(Arrays.asList(55));
        patch2.setFileName("/src/main/java/net/CHANGELOG.md");

        v.setPatches(new HashSet<>(Arrays.asList(patch, patch2)));

        VulnerabilityStatementsPlugin.VulnerabilityStatementsKafkaPlugin.checkFileExtensions(v);

        assertEquals(new HashSet<>(Arrays.asList(patch)), v.getPatches());
    }

    @Test
    public void lazyIngestCall() throws JsonProcessingException {
        var v = new Vulnerability();
        v.setId("CVE-TEST");
        v.setDescription("Mock Vulnerability");
        v.setSeverity(Severity.HIGH);
        v.setScoreCVSS2(7.5);
        v.setScoreCVSS3(5.0);
        v.setPublishedDate("12/11/2019");
        v.setLastModifiedDate("08/31/2020");
        v.setPurls(Arrays.asList("pkg:maven/org.testing/mock@1.0.1"));
        var patch = new Patch();
        patch.setPatchDate("04/04/2004");
        patch.setOriginalChangedLineNumbers(Arrays.asList(33));
        patch.setNewChangedLineNumbers(Arrays.asList(33));
        patch.setFileName("/src/main/java/net/GenericClass.java");
        v.setPatches(new HashSet<>(Arrays.asList(patch)));

        var metadataUtility = Mockito.mock(MetadataUtility.class);
        var cache = new Cache();
        cache.pkgVsnIdToVsn.put(1L, "1.0.1");
        cache.pkgVsnToName.put("1.0.1", "org.testing:mock");

        var pkgIds = new HashMap<String, Long>(); pkgIds.put("pkg:maven/org.testing/mock", 1L);
        when(metadataUtility.getPackageIds(Mockito.any(DSLContext.class), Mockito.any(Vulnerability.class))).thenReturn(pkgIds);
        when(metadataUtility.getPackageVersionIds(v.getPurls(), context, pkgIds, v)).thenReturn(Arrays.asList(1L));
        when(metadataUtility.getPackageVersionIds(v.getFirstPatchedPurls(), context, pkgIds, null)).thenReturn(new ArrayList<>());
        when(metadataUtility.areCallablesMissing(Mockito.anyLong(), Mockito.any(DSLContext.class))).thenReturn(true);
        when(metadataUtility.getCache()).thenReturn(cache);
        when(metadataUtility.getFastenUrisForPatch(patch.getFileName(),
                patch.getNewChangedLineNumbers(),
                1L, context)).thenReturn(new HashSet<>());

        var coord = "mvn/packages/org.testing:mock/1.0.1";
        doNothing().when(metadataUtility).sendIngestRequest(coord);

        // CALL
        kafkaPlugin.injectVulnerabilityIntoDB(v, metadataUtility);

        // MOCKITO VERIFY
        Mockito.verify(metadataUtility).getPackageIds(context, v);
        Mockito.verify(metadataUtility).getPackageVersionIds(v.getPurls(), context, pkgIds, v);
        Mockito.verify(metadataUtility).getPackageVersionIds(v.getFirstPatchedPurls(), context, pkgIds, null);
        Mockito.verify(metadataUtility).getFastenUrisForPatch(patch.getFileName(),
                patch.getNewChangedLineNumbers(),
                1L, context);
        // VERIFY injection at package-level
        Mockito.verify(metadataUtility).injectPackageVersionVulnerability(v, 1L, context);
        //VERIFY lazy ingestion
        Mockito.verify(metadataUtility).sendIngestRequest(coord);
    }

    @Test
    public void splitSearch() throws JsonProcessingException {
        var v = new Vulnerability();
        v.setId("CVE-TEST");
        v.setDescription("Mock Vulnerability");
        v.setSeverity(Severity.HIGH);
        v.setScoreCVSS2(7.5);
        v.setScoreCVSS3(5.0);
        v.setPublishedDate("12/11/2019");
        v.setLastModifiedDate("08/31/2020");
        v.setPurls(Arrays.asList("pkg:maven/org.testing/mock@1.0.1"));
        v.setFirstPatchedPurls(Arrays.asList("pkg:maven/org.testing/mock@1.0.2"));
        var patch = new Patch();
        patch.setPatchDate("04/04/2004");
        patch.setNewChangedLineNumbers(Arrays.asList(36));
        patch.setOriginalChangedLineNumbers(Arrays.asList(33));
        patch.setFileName("/src/main/java/net/GenericClass.java");
        v.setPatches(new HashSet<>(Arrays.asList(patch)));

        var metadataUtility = Mockito.mock(MetadataUtility.class);

        // MOCKITO WHEN
        var pkgIds = new HashMap<String, Long>(); pkgIds.put("pkg:maven/org.testing/mock", 1L);
        when(metadataUtility.getPackageIds(Mockito.any(DSLContext.class), Mockito.any(Vulnerability.class))).thenReturn(pkgIds);
        when(metadataUtility.getPackageVersionIds(v.getPurls(), context, pkgIds, v)).thenReturn(Arrays.asList(1L));
        when(metadataUtility.getPackageVersionIds(v.getFirstPatchedPurls(), context, pkgIds, null)).thenReturn(Arrays.asList(2L));

        var fasten_uri = "/java/net/GenericClass.%3Cclinit%3E()%2Fjava.lang%2FVoidType";
        var fastenUris = new HashSet<>(Arrays.asList(fasten_uri));
        var fastenUrisEmpty = new HashSet<String>();
        var pkgVersionVulnIds = new HashSet<>(Arrays.asList(1L));
        when(metadataUtility.getFastenUrisForPatch(patch.getFileName(),
                patch.getOriginalChangedLineNumbers(),
                1L, context)).thenReturn(fastenUrisEmpty);
        when(metadataUtility.getFastenUrisForPatch(patch.getFileName(),
                patch.getNewChangedLineNumbers(),
                2L, context)).thenReturn(fastenUris);
        doNothing().when(metadataUtility).injectPackageVersionVulnerability(Mockito.any(Vulnerability.class), Mockito.anyLong(), Mockito.any(DSLContext.class));
        when(metadataUtility.getCallableIdsForFastenUri(fasten_uri, pkgVersionVulnIds, context)).thenReturn(new HashSet<>(Arrays.asList(42L)));
        when(metadataUtility.injectCallableVulnerability(Mockito.any(Vulnerability.class), Mockito.anyLong(), Mockito.any(DSLContext.class))).thenReturn(1);
        when(metadataUtility.getFullFastenUri(fasten_uri, 42L)).thenReturn("full_fasten_uri");

        // CALL
        kafkaPlugin.injectVulnerabilityIntoDB(v, metadataUtility);

        // MOCKITO VERIFY
        Mockito.verify(metadataUtility).getPackageIds(context, v);
        Mockito.verify(metadataUtility).getPackageVersionIds(v.getPurls(), context, pkgIds, v);
        Mockito.verify(metadataUtility).getPackageVersionIds(v.getFirstPatchedPurls(), context, pkgIds, null);
        Mockito.verify(metadataUtility).getFastenUrisForPatch(patch.getFileName(),
                patch.getOriginalChangedLineNumbers(),
                1L, context);
        Mockito.verify(metadataUtility).getFastenUrisForPatch(patch.getFileName(),
                patch.getNewChangedLineNumbers(),
                2L, context);
        Mockito.verify(metadataUtility).getCallableIdsForFastenUri(fasten_uri, pkgVersionVulnIds, context);
        // VERIFY injection
        Mockito.verify(metadataUtility).injectPackageVersionVulnerability(v, 1L, context);
        Mockito.verify(metadataUtility).injectCallableVulnerability(v, 42L, context);
        Mockito.verify(metadataUtility).getFullFastenUri(fasten_uri, 42L);
    }
}
